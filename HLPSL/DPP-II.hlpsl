%Device Provisioning Protocol (DPP-II) is a Wi-Fi Alliance specification and also known
%as 'Wi-Fi CERTIFIED Easy Connect™'. The protocol aims to provide a user-friendly way
%to provision diverse IoT devices to secure Wi-Fi securely. DPP refers the new
%out-of-the-box device as Enrollee. A logical entity that configures the enrollee
%to the secure Wi-Fi is called Configurator . It could be an application on a device.
%DPP uses four sub-protocols and works in the following phases:
%1. Bootstrapping: The enrollee announces its presence by sending its Bootstrapping-public
%   key (and some metadata) to the configurator using an out-of-the-band mechanism. It can
%   be done by scanning a QR code, an NFC tap, or a bluetooth exchange.
%2. Authentication Protocol: DPP defines two roles 'Initiator' and 'Responder'. Either
%   configurator or enrollee can act as initiator and initiate the authentication phase.
%   We have considered configurator as an initiator for implementation purposes in this paper.
%   Both configurator and enrollee have two public-private key pairs: bootstrapping and protocol
%   keys. In this phase configurator and enrollee perform an ECDH (Elliptic-curve Diffie–Hellman)
%   handshake using the public-private key pairs to establish a common secret session key. After
%   receiving the enrollee's presence announcement configurator initiates the authentication by
%   sending a DPP-authentication-request encrypted by an ephemeral intermediate ECDH key. The
%   authentication request contains a nonce. The enrollee returns the nonce as part of its DPP-
%   authentication-response and proves that it possess the private key corresponding to the
%   bootstrapping public received by the configurator in bootstrapping phase. After receiving the
%   correct nonce, the configurator sends a DPP- authentication-confirm message and authenticates
%   the enrollee.
%3. Configuration Protocol: Once the enrollee is authenticated, it sends a DPP configuration request
%  (requesting configurator for its configuration information) encrypted by the session key. The
%   configurator responds with the configuration credential in the form of a configuration object
%   secured by the session key. The configuration object could be a passphrase, password, or a DPP
%   connector. In our implementations, the DPP connector has been taken as the configuration object.
%	DPP connector is basically a certificate from the configurator, containing the public-protocol
%   key of the enrollee signed by the configurator. Using this, the enrollee can connect to the
%   network and the other devices on the network.
%4. Network Access: After receiving the connector, the enrollee sends it to the access point.
%   The access point verifies the DPP connector using the configurator's public sign key. If it is
%   configured by the same configurator it will successfully verify the connectors and enrolle will
%   join the network. Similarly, the device can connect to other devices on the network using the DPP
%   connector.





role configurator(C, E1, E2 : agent,
	   Mx, Nx, Lx, Mx2, Nx2, Lx2: symmetric_key,  
           H : hash_func,
           Bi, Pi, Csign, Kca: public_key,  %% Kca is the public key of a T3P (ie. CA)
           SND, RCV: channel (dy))
played_by C
def=

   local Ni, Nc, Nr, Ne, Sid, Pa, PMS, Ni2, Nr2, Ne2, Ssid: text,
	 Channellist, Capi, Capr, Pver, Channellist2, Capi2, Capr2, Pver2: text,
	 K1,K2,K1_2,K2_2: hash(text.text.symmetric_key),
	 Bk, Bk2: hash(text.text.symmetric_key.symmetric_key.symmetric_key),
	 Ke, Ke2: hash(hash(text.text.symmetric_key.symmetric_key.symmetric_key).text.nat),
         State: nat,
         Br, Pr, Br2, Pr2: public_key,
         M: hash(text.text.text),
	 Configreq,Configobject,Sendconnstatus, Configreq2,Configobject2,Sendconnstatus2 : text,
	 Iauth, Iauth2 : hash(text.text.public_key.public_key.public_key.public_key.nat),
	 Rauth, Rauth2 : hash(text.text.public_key.public_key.public_key.public_key.nat)

   const sec_k1, sec_iauth, auth_ni, auth_nr, sec_k1_2, sec_k2_2, auth_ni2, auth_nr2, sec_iauth2  : protocol_id,
	 chirp  : text,
	 first_intermediate_key, second_intermediate_key, dpp_status : text,
	 salt : text,
	 len : nat,
	 enrl2_start, start_networkaccess : text

   init  State := 1

   transition

   1.  State = 1
       /\ RCV(H(chirp.Br'))
       =|>
       State' := 3
		/\ Ni':= new()
		/\ Channellist' := new()
		/\ Capi' := new()
		/\ Pver':= new()	
		/\ K1' := H(salt.first_intermediate_key.Mx)
		/\ SND(H(Br).H(Bi).Pi.Pver'.Channellist'.{Ni'.Capi'}_K1')
		/\ secret(K1,sec_k1,{C,E1})
		/\ witness(C,E1,auth_ni,Ni)

  3.  State = 3
		/\ RCV(H(Br').H(Bi').Pr'.Pver'.{Nr'.Ni'.Capr'.{Rauth'}_K2'}_Ke')
		/\ Rauth'=H(Ni'.Nr'.Pi.Pr.Bi.Br.0)
		/\ K2' = H(salt.second_intermediate_key.Nx)
		/\ Ke' = H(H(Ni.Nr.Mx.Nx.Lx).dpp_status.len)
		=|>
		State' := 5
		/\ Iauth' := H(Nr.Ni.Pr.Pi.Br.Bi.1)
		/\ SND(H(Br).H(Bi).{Iauth'}_Ke')
		/\ secret(Iauth,sec_iauth,{C,E1})
		/\ request(C,E1,auth_nr,Nr)
  5.  State = 5
		/\ RCV({Ne'.Configreq'}_Ke')
		=|> 
		State' :=7
		/\ Ssid' := new()
		/\ Sendconnstatus' := new()
		/\ SND({Ne'.(Ssid'.{Pr}_inv(Csign)).Sendconnstatus'}_Ke)
  7.  State = 7
		/\ RCV({Ne'}_Ke')
		=|> State':=9 %/\ SND(enrl2_start)	
 
  9.  State = 9 /\ RCV(H(chirp.Br2'))     
		=|> State' :=13
		/\ Ni2':= new()
		/\ Channellist2' := new()
		/\ Capi2' := new()
		/\ Pver2':= new()	
		/\ K1_2' := H(salt.first_intermediate_key.Mx2)
		/\ SND(H(Br2).H(Bi).Pi.Pver2'.Channellist2'.{Ni2'.Capi2'}_K1_2')%check bout these value
		/\ secret(K1_2,sec_k1_2,{C,E2})
		/\ witness(C,E2,auth_ni2,Ni2)


  13. State = 13 /\ RCV(H(Br2').H(Bi').Pr2'.Pver2'.{Nr2'.Ni2'.Capr2'.{Rauth2'}_K2_2'}_Ke2')
		/\ Rauth2'=H(Ni2'.Nr2'.Pi.Pr2'.Bi.Br2'.0)
		/\ K2_2' = H(salt.second_intermediate_key.Nx2)
		/\ Ke2' = H(H(Ni2'.Nr2'.Mx2.Nx2.Lx2).dpp_status.len)
		=|> State':= 15
		/\ Iauth2' := H(Nr2'.Ni2.Pr2'.Pi.Br2'.Bi.1)
		/\ SND(H(Br2').H(Bi).{Iauth2'}_Ke2')
		/\ secret(Iauth2,sec_iauth2,{C,E2})
		/\ request(C,E2,auth_nr2,Nr2)

  15. State = 15 /\ RCV ({Ne2'.Configreq2'}_Ke2')
		=|> State' := 17 
		/\ Sendconnstatus2' := new()
		/\ SND({Ne2'.(Ssid.{Pr2}_inv(Csign)).Sendconnstatus2'}_Ke2)	

  17. State = 17 /\ RCV({Ne2'}_Ke2')
		=|> State' := 19 /\ SND(start_networkaccess)	

	



end role



role enrollee1(C, E1, E2 : agent,
	 Mx, Nx, Lx: symmetric_key,
         H : hash_func,
         Br, Pr, Kca: public_key,
         SND, RCV: channel (dy))
played_by E1
def=

   local Ni, Nr, Na, Nb, Ne, Sid, Pa, PMS, Ssid: text,
	 Channellist, Capi, Capr, Pver, Transctionid, Dppstatus: text, 
	 K1, K2: hash(text.text.symmetric_key),
	 Bk: hash(text.text.symmetric_key.symmetric_key.symmetric_key),
	 Ke: hash(hash(text.text.symmetric_key.symmetric_key.symmetric_key).text.nat),
         State: nat,
	 Bi, Pi, Pr2, Csign : public_key,
	 Configreq, Configobject, Sendconnstatus : text,
	 Iauth : hash(text.text.public_key.public_key.public_key.public_key.nat),
	 Rauth : hash(text.text.public_key.public_key.public_key.public_key.nat)

   const sec_nr, sec_k2, sec_rauth, sec_ne, auth_ni, auth_nr : protocol_id,
	 chirp  : text, 
	 first_intermediate_key, second_intermediate_key, dpp_status : text,
	 salt : text,
	 len : nat

   init  State := 0

   transition

   0.  State = 0 /\ RCV(start)
       =|>
       State' := 2
       /\ SND(H(chirp.Br))
   2. State = 2 /\ RCV(H(Br').H(Bi').Pi'.Pver'.Channellist'.{Ni'.Capi'}_K1')
		/\ K1' = H(salt.first_intermediate_key.Mx)
		=|> 
		State' := 4
		/\ Nr' := new() 
		/\ Capr' := new()
		/\ Rauth' :=H(Ni'.Nr'.Pi.Pr.Bi.Br.0)
		/\ K2' := H(salt.second_intermediate_key.Nx)
		/\ Bk' := H(Ni.Nr.Mx.Nx.Lx)
		/\ Ke' := H(H(Ni.Nr.Mx.Nx.Lx).dpp_status.len)
		/\ SND(H(Br).H(Bi').Pr.Pver'.{Nr'.Ni'.Capr'.{Rauth'}_K2'}_Ke')	
		/\ secret(K2,sec_k2,{E1,C})
		/\ witness(E1,C,auth_nr,Nr)
		
  4.  State = 4 /\ RCV(H(Br').H(Bi').{Iauth'}_Ke')
		/\ Iauth' = H(Nr.Ni.Pr.Pi.Br.Bi.1)
		=|>
		State' := 6
		/\ Ne' := new()
		/\ Configreq' := new()
		/\ SND ({Ne'.Configreq'}_Ke)
		/\ secret(Ne,sec_ne,{E1,C})
		/\ request(E1,C,auth_ni,Ni)
	
  6.  State = 6 /\ RCV({Ne'.(Ssid'.{Pr'}_inv(Csign')).Sendconnstatus'}_Ke')
		=|>
		State' := 8
		/\ SND({Ne}_Ke)

  8.  State = 8 /\ RCV(start_networkaccess)
		=|>
		State' :=20 
		/\ Transctionid' := new()	
		/\ SND(Transctionid'.{Pr}_inv(Csign))


  8.  State = 20 /\ RCV(Transctionid'.Dppstatus'.{Pr2'}_inv(Csign))
		=|>
		State' :=24 

end role



role enrollee2(C, E1, E2 : agent,
	  Mx2, Nx2, Lx2: symmetric_key,
          H : hash_func,
          Br2, Pr2, Kca: public_key,
	 SND, RCV: channel (dy))
played_by E2
def=

   local Ni, Nr, Na, Nb, Ne, Sid, Pa, PMS, Ni2, Nr2, Ne2, Ssid: text,
	 Channellist, Capi, Capr, Pver, Channellist2, Capi2, Capr2, Pver2, Transctionid, Dppstatus : text, 
	 K1, K2, K1_2, K2_2: hash(text.text.symmetric_key),
	 Bk, Bk2: hash(text.text.symmetric_key.symmetric_key.symmetric_key),
	 Ke, Ke2: hash(hash(text.text.symmetric_key.symmetric_key.symmetric_key).text.nat),
         State: nat,
	 Bi, Pi, Pr, Csign : public_key,
	 Configreq, Configobject, Sendconnstatus, Configreq2, Configobject2, Sendconnstatus2 : text,
	 Iauth2 : hash(text.text.public_key.public_key.public_key.public_key.nat),
	 Rauth2 : hash(text.text.public_key.public_key.public_key.public_key.nat)

   const sec_nr, sec_k2, sec_rauth, sec_ne, auth_ni, auth_nr, sec_k2_2, sec_k1_2, auth_nr2, auth_ni2, sec_ne2 : protocol_id,
	 chirp  : text, 
	 first_intermediate_key, second_intermediate_key, dpp_status : text,
	 salt : text,
	 len : nat,
	 enrl2_start, start_networkaccess : text

   init  State := 10 

   transition

     0. State = 10 /\ RCV(start)       
	=|>
         State' := 11 
        /\ SND(H(chirp.Br2))
     11. State = 11 /\ RCV(H(Br2').H(Bi').Pi'.Pver2'.Channellist2'.{Ni2'.Capi2'}_K1_2')
		/\ K1_2' = H(salt.first_intermediate_key.Mx2)
		=|> State' := 14
		/\ Nr2' := new() 
		/\ Capr2' := new()
		/\ Rauth2' :=H(Ni2'.Nr2'.Pi.Pr2.Bi.Br2.0)
		/\ K2_2' := H(salt.second_intermediate_key.Nx2)
		/\ Bk2' := H(Ni2.Nr2.Mx2.Nx2.Lx2)
		/\ Ke2' := H(H(Ni2.Nr2.Mx2.Nx2.Lx2).dpp_status.len)
		/\ SND(H(Br2).H(Bi').Pr2.Pver2'.{Nr2'.Ni2'.Capr2'.{Rauth2'}_K2_2'}_Ke2')
		/\ secret(K2_2,sec_k2_2,{E2,C})
		/\ witness(E2,C,auth_nr2,Nr2)


   	
     14. State = 14 /\ RCV(H(Br2').H(Bi').{Iauth2'}_Ke2')	
		=|> State' := 16
		/\ Ne2' := new()
		/\ Configreq2' := new()
		/\ SND ({Ne2'.Configreq2'}_Ke2)
		/\ secret(Ne2,sec_ne2,{E2,C})
		/\ request(E2,C,auth_ni2,Ni2)

     16. State = 16 %/\ RCV({Ne2'.Configobject2'.Sendconnstatus2'}_Ke2')
		/\ RCV({Ne2'.(Ssid'.{Pr2'}_inv(Csign')).Sendconnstatus2'}_Ke2')	
		=|>
		State' := 18
		/\ SND({Ne2}_Ke2)

     18. State =18 /\ RCV(Transctionid'.{Pr'}_inv(Csign))
		=|>
		State' :=20
		/\ Dppstatus' := new()
		/\ SND(Transctionid'.Dppstatus'.{Pr2}_inv(Csign))
   
end role




role session(C,E1,E2: agent,
	     Mx, Nx, Lx, Mx2, Nx2, Lx2: symmetric_key,
             H : hash_func,
             Bi, Pi, Csign, Br, Pr, Br2, Pr2, Kca: public_key)
def=

   local  SC, SR, RC, RR: channel (dy)

   composition


                configurator(C,E1,E2,Mx,Nx,Lx,Mx2,Nx2,Lx2,H,Bi,Pi,Csign,Kca,SC,RC)
              /\   enrollee1(C,E1,E2,Mx,Nx,Lx,H,Br,Pr,Kca,SR,RR)
	      /\   enrollee2(C,E1,E2,Mx2,Nx2,Lx2,H,Br2,Pr2,Kca,SR,RR)

end role



role environment()
def=

   const na_nb1, na_nb2      : protocol_id,
         c, e1, e2           : agent,
	 mx, nx, lx, mx2, nx2, lx2: symmetric_key,
         h     : hash_func,
         bi, pi, csign, br, pr, br2, pr2, kca, ki, kib, kip, icsign : public_key

   intruder_knowledge = { c, e1, e2, bi, pi, csign, br, pr, br2, pr2, kca, ki, kib, kip, icsign, inv(ki), inv(kib), inv(kip), inv(icsign),
                          {i.ki}_(inv(kca)) }  

   composition
        session(c,e1,e2,mx,nx,lx,mx2,nx2,lx2,h,bi,pi,csign,br,pr,br2,pr2,kca)
%   /\  session(c,i,e2,mx,nx,lx,mx2,nx2,lx2,h,bi,pi,csign,kib,kip,br2,pr2,kca)	
%   /\  session(c,e1,i,mx,nx,lx,mx2,nx2,lx2,h,bi,pi,csign,br,pr,kib,kip,kca)	
%   /\  session(i,e1,e2,mx,nx,lx,mx2,nx2,lx2,h,kib,kip,icsign,br,pr,br2,pr2,kca)
   


end role



goal

  secrecy_of sec_k1, sec_k2, sec_iauth, sec_ne, sec_k1_2, sec_k2_2, sec_iauth2, sec_ne2  % Addresses G7
  authentication_on auth_ni, auth_nr, auth_ni2, auth_nr2  
  authentication_on na_nb2 

end goal



environment()
